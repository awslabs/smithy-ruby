module Hearth
  module DNS
    # Resolves a host name and service to an IP address. Can be used with
    # {Hearth::HTTP::Client} host_resolver option. This implementation uses
    # Addrinfo.getaddrinfo to resolve the host name.
    # @see https://ruby-doc.org/stdlib-3.0.2/libdoc/socket/rdoc/Addrinfo.html
    class HostResolver
      # @param [Integer] service (443)
      # @param [Integer] family (nil)
      # @param [Symbol] socktype (:SOCK_STREAM)
      # @param [Integer] protocol (nil)
      # @param [Integer] flags (nil)
      def initialize: (?service: ::Integer, ?family: untyped?, ?socktype: ::Symbol, ?protocol: untyped?, ?flags: untyped?) -> void

      # @return [Integer]
      attr_reader service: untyped

      # @return [Integer]
      attr_reader family: untyped

      # @return [Symbol]
      attr_reader socktype: untyped

      # @return [Integer]
      attr_reader protocol: untyped

      # @return [Integer]
      attr_reader flags: untyped

      # @param [String] nodename
      # @param (see Hearth::DNS::HostResolver#initialize)
      def resolve_address: (nodename: untyped, **untyped kwargs) -> ::Array[untyped]

      private

      def addrinfo: (untyped options) -> untyped

      def ipv4_addr: (untyped addrinfo_list, untyped options) -> (nil | untyped)

      def ipv6_addr: (untyped addrinfo_list, untyped options) -> (nil | untyped)

      def use_ipv6?: () -> untyped
    end
  end
end
