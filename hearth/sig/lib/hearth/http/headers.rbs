module Hearth
  module HTTP
    # Provides Hash like access for Headers with key normalization
    # @api private
    class Headers
      # @param [Hash<String,String>] headers
      def initialize: (?headers: ::Hash[String, String] headers) -> Headers

      # @param [String] key
      def []: (String key) -> String

      # @param [String] key
      # @param [String] value
      def []=: (String key, String value) -> String

      # @param [String] key
      # @return [Boolean] Returns `true` if there is a header with
      #   the given key.
      def key?: (String key) -> bool

      # @return [Array<String>]
      def keys: () -> Array[String]

      # @param [String] key
      # @return [String, nil] Returns the value for the deleted key.
      def delete: (String key) -> (String | nil)

      # @return [Enumerable<String,String>]
      def each_pair: () { () -> String } -> Enumerable[Array[String]]

      alias each each_pair

      # @return [Hash]
      def to_hash: () -> Hash[String, String]

      alias to_h to_hash

      # @return [Integer] Returns the number of entries in the headers
      #   hash.
      def size: () -> Integer

      private

      def normalize: (String key) -> String
    end
  end
end
