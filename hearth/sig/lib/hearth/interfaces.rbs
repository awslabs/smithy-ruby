# Hack - https://github.com/ruby/delegate/issues/8
class SimpleDelegator
end

# Hack - https://github.com/ruby/rbs/issues/1481
class URI
end

# Hack - https://github.com/ruby/rbs/issues/1482
class Logger
end

module Hearth
  interface _Plugin[ServiceConfig]
    def call: (ServiceConfig) -> void
  end

  interface _Interceptor[ServiceConfig]
    def read_before_execution: (InterceptorContext[ServiceConfig]) -> void

    def modify_before_serialization: (InterceptorContext[ServiceConfig]) -> void

    def read_before_serialization: (InterceptorContext[ServiceConfig]) -> void

    def read_after_serialization: (InterceptorContext[ServiceConfig]) -> void

    def modify_before_retry_loop: (InterceptorContext[ServiceConfig]) -> void

    def read_before_attempt: (InterceptorContext[ServiceConfig]) -> void

    def modify_before_signing: (InterceptorContext[ServiceConfig]) -> void

    def read_before_signing: (InterceptorContext[ServiceConfig]) -> void

    def read_after_signing: (InterceptorContext[ServiceConfig]) -> void

    def modify_before_transmit: (InterceptorContext[ServiceConfig]) -> void

    def read_before_transmit: (InterceptorContext[ServiceConfig]) -> void

    def read_after_transmit: (InterceptorContext[ServiceConfig]) -> void

    def modify_before_deserialization: (InterceptorContext[ServiceConfig]) -> void

    def read_before_deserialization: (InterceptorContext[ServiceConfig]) -> void

    def read_after_deserialization: (InterceptorContext[ServiceConfig]) -> void

    def modify_before_attempt_completion: (InterceptorContext[ServiceConfig]) -> void

    def read_after_attempt: (InterceptorContext[ServiceConfig]) -> void

    def modify_before_completion: (InterceptorContext[ServiceConfig]) -> void

    def read_after_execution: (InterceptorContext[ServiceConfig]) -> void
  end

  interface _ErrorInspector
    def initialize: (ApiError, Response) -> void

    def retryable?: () -> bool

    def error_type: () -> String

    def hints: () -> Hash[Symbol, untyped]
  end

  interface _RetryStrategy
    def acquire_initial_retry_token: (?String? _token_scope) -> Retry::Token

    def refresh_retry_token: (Retry::Token _retry_token, _ErrorInspector _error_info) -> Retry::Token?

    def record_success: (Retry::Token _retry_token) -> Retry::Token
  end

  interface _AuthResolver[Params]
    def resolve: (Params) -> AuthSchemes::Base
  end

  interface _EndpointResolver[Params]
    def resolve: (Params) -> EndpointRules::Endpoint
  end

  interface _WritableIO
    def write: (*_ToS) -> Integer
  end
end
