module Hearth
  module Telemetry
    interface _TracerProvider
      def tracer: (?String name) -> _Tracer
    end

    interface _Tracer
      def start_span: (String name, ?untyped with_parent, ?Hash[String, untyped] attributes, ?untyped kind) -> _Span

      def in_span: (String name, ?Hash[String, untyped] attributes, ?untyped kind) -> _Span
    end

    interface _Span
      def set_attribute: (String key, untyped value) -> self
      alias []= set_attribute

      def add_attributes: (Hash[String, untyped] attributes) -> self

      def add_event: (String name, ?Hash[String, untyped] attributes) -> self

      def status=: (untyped status) -> void

      def finish: (?Time end_timestamp) -> self

      def record_exception: (untyped exception, ?Hash[String, untyped] attributes) -> void
    end

    interface _ContextManager
      def current: () -> untyped

      def current_span: () -> _Span

      def attach: (untyped context) -> untyped

      def detach: (untyped token) -> bool
    end
  end
end