module Hearth
  # A module that can be included in a class to provide a #identity method.
  # The class must implement #refresh(properties) that sets @identity. The
  # refresh method will be called when #identity is called and the identity
  # is nil or near expiration.
  module RefreshingIdentityResolver
    SYNC_EXPIRATION_LENGTH: 300

    ASYNC_EXPIRATION_LENGTH: 600

    def initialize: () -> void

    # @return [Identity]
    def identity: (?::Hash[untyped, untyped] properties) -> untyped

    private

    def sync_expiration_length: () -> untyped

    def async_expiration_length: () -> untyped

    # Refreshes identity asynchronously and synchronously.
    # If we are near to expiration, block while refreshing the identity.
    # Otherwise, if we're approaching expiration, use the existing identity
    # but attempt a refresh in the background.
    def refresh_if_near_expiration!: (untyped properties) -> (untyped | untyped | nil | nil)

    def near_expiration?: (untyped expiration_length) -> untyped
  end
end
