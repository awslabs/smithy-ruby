module Smithy
  module Client
    module Shapes
      class Shape
        def initialize: (?Hash[Symbol, untyped]) -> void

        attr_accessor id: String?
        attr_accessor traits: Hash[String, untyped]
      end

      class ServiceShape < Shape
        attr_accessor version: String?
      end

      class OperationShape < Shape
        attr_accessor input: StructureShape?
        attr_accessor output: StructureShape?
        attr_accessor errors: Array[StructureShape]
      end

      class BigDecimalShape < Shape
      end

      class BlobShape < Shape
      end

      class BooleanShape < Shape
      end

      class DocumentShape < Shape
      end

      class EnumShape < Shape
        attr_accessor members: Hash[Symbol, MemberShape]
        def add_member: (String, Shape, Hash[String, untyped]?) -> void
      end

      class IntegerShape < Shape
      end

      class IntEnumShape < EnumShape
      end

      class FloatShape < Shape
      end

      class ListShape < Shape
        attr_accessor member: MemberShape?
        def set_member: (Shape, Hash[String, untyped]?) -> void
      end

      class MapShape < Shape
        attr_accessor key: MemberShape?
        attr_accessor value: MemberShape?
        def set_key: (Shape, Hash[String, untyped]?) -> void
        def set_value: (Shape, Hash[String, untyped]?) -> void
      end

      class StringShape < Shape
      end

      class StructureShape < Shape
        attr_accessor members: Hash[Symbol, MemberShape]
        attr_accessor type: untyped
        def add_member: (String, Shape, Hash[String, untyped]?) -> void
        def member?: (String | Symbol) -> bool
        def member: (String | Symbol) -> MemberShape
      end

      class TimestampShape < Shape
      end

      class UnionShape < StructureShape
      end

      class MemberShape < Shape
        attr_accessor name: String?
        attr_accessor shape: Shape?
        attr_accessor traits: Hash[String, untyped]
      end
    end
  end
end