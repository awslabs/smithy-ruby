# frozen_string_literal: true

# This is generated code!

module <%= module_name %>
  # When this service returns an error response, the SDK constructs and raises an error.
  # These errors all extend <%= module_name %>::Errors::ServiceError < {Smithy::Client::Errors::ServiceError}
  #
  # You can rescue all errors using the ServiceError:
  #
  #     begin
  #       # do stuff
  #     rescue <%= module_name %>::Errors::ServiceError
  #       # rescues all API errors
  #     end
  #
  # ## Request Context
  #
  # ServiceError objects have a {Smithy::Client::Errors::ServiceError#context #context} method
  # that returns information about the request that generated the error.
  # See {Smithy::Client::HandlerContext} for more information.
  #
  # ## Error Classes
  #
<% errors.each do |error| -%>
  # * {<%= error.name %>}
<% end -%>
  #
  # Additionally, error classes are dynamically generated for service errors based on the error code
  # if they are not defined above.
  module Errors
    extend Smithy::Client::Errors::DynamicErrors
<% errors.each do |error| -%>

<% error.docstrings.each do |docstring| -%>
    # <%= docstring %>
<% end -%>
    class <%= error.name %> < Smithy::Client::Errors::ServiceError
      # @param [Smithy::Client::HandlerContext] context
      # @param [String] message
      # @param [<%= module_name %>::Types::<%= error.name %>] data
      def initialize(context, message, data = Smithy::Model::EmptyStructure.new)
        super(context, message, data)
      end
<% error.members.each do |member| -%>

<% member.docstrings.each do |docstring| -%>
      # <%= docstring %>
<% end -%>
      def <%= member.name %>
        <%= '@message || ' if member.message? %>@data[:<%= member.name %>]
      end
<% end -%>
<% if error.retryable? -%>

      def retryable?
        true
      end
<% end -%>
<% if error.throttling? -%>

      def throttling?
        true
      end
<% end -%>
    end
<% end -%>
  end
end
