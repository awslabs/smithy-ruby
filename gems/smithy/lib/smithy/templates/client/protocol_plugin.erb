# frozen_string_literal: true

# This is generated code!

module <%= module_name %>
  module Plugins
     # Protocol plugin - allows user to configure protocol on client.
     # @api private
     class Protocol < Smithy::Client::Plugin
       option(
         :protocol,
<% if protocol -%>
         doc_default: '<%= protocol %>',
         doc_type: '<%= protocol %>',
         docstring: <<~DOCS) do |_cfg|
           Allows you to overwrite default protocol. The given protocol
           must provide the following functionalities:
           - `build_request`
           - `parse_response`
           - `parse_error`
           See existing protocols within Smithy::Client::Protocols for examples.
         DOCS
         <%= protocol %>.new
       end
<% else -%>
         doc_default: nil,
         docstring: <<~DOCS)
           This configuration is required to build requests and parse responses.
           In Smithy, a protocol is a named set of rules that defines the syntax
           and semantics of how a client and server communicate. The given protocol
           must provide the following functionalities:
           - `build_request`
           - `parse_response`
           - `parse_error`
           See existing protocols within Smithy::Client::Protocols for examples.
         DOCS
<% end -%>

       # @api private
       class Build < Smithy::Client::Handler
         def call(context)
           context.config.protocol.build_request(context)
           @handler.call(context)
         end
       end

       # @api private
       class Parse < Smithy::Client::Handler
         def call(context)
           resp = @handler.call(context)
           context.config.protocol.parse_response(context)
           resp
         end
       end

       # @api private
       class Error < Smithy::Client::Handler
         def call(context)
           @handler.call(context).on(300..599) do |response|
             context.config.protocol.parse_error(context, response)
           end
         end
       end

       def add_handlers(handlers, config)
         handlers.add(Build)
         handlers.add(Parse)
         # TODO: Requires error handling to be implemented
         # handlers.add(Error, step: :sign)
       end
     end
  end
end
