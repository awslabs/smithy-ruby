# frozen_string_literal: true

# This is generated code!

module <%= namespace %>
  # Endpoint parameters used to resolve endpoints per request.
<% parameters.each do |param| -%>
  # @!attribute <%= param.name %>
<% if param.documentation -%>
<% param.documentation.split("\n").each do |line| -%>
  #   <%= line %>
<% end -%>
<% end -%>
  #
  #   @return [<%= param.documentation_type %>]
  #
<% end -%>
  EndpointParameters = Struct.new(
<% parameters.each do |param| -%>
    :<%= param.name %>,
<% end -%>
    keyword_init: true
  ) do
    include Smithy::Client::Structure

    def initialize(options = {})
<% parameters.each do |param| -%>
      self[:<%= param.name %>] = options.fetch(:<%= param.name %>, <%= param.default_value %>)
<% end -%>
<% parameters.select(&:validate_required?).each do |param| -%>
      raise ArgumentError, "Missing required EndpointParameter: :<%= param.name %>" if <%= param.name %>.nil?
<% end -%>
    end

    # @api private
    def self.create(context)
      config = context.config
<% if operation_params.empty? -%>
      new({
  <% parameters.select(&:create_from_config?).each do |param| -%>
        <%= param.name %>: <%= param.value %>,
  <% end -%>
      }.compact)
<% else -%>
      params = context.params
      operation_params =
        case context.operation_name
  <% operation_params.each do |name, params| -%>
        when :<%= name %>
          {
<% params.each do |param| -%>
            <%= param.name %>: <%= param.value %>,
<% end -%>
          }
<% end -%>
        else
          {}
        end

      new({
  <% parameters.select(&:create_from_config?).each do |param| -%>
        <%= param.name %>: <%= param.value %>,
  <% end -%>
      }.merge(operation_params).compact)
<% end -%>
    end
  end
end
