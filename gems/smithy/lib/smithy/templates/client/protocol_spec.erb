# frozen_string_literal: true

# This is generated code!

require_relative '../spec_helper'
<% additional_requires.each do |r| -%>
require '<%= r %>'
<% end -%>


module <%= module_name %>
  # TODO: Can be replaced by stub_responses config once implemented
  class StubSend < Smithy::Client::Plugin
    # TODO: Allow configuration of response
    handle(step: :send) do |context|
      Smithy::Client::Output.new(context: context)
    end
  end

  describe Client do
    before(:all) { Client.add_plugin(StubSend) }
    after(:all) { Client.remove_plugin(StubSend) }

    let(:client_options) do
      {
        # stub_responses: true,
        # validate_input: false,
        endpoint: 'http://127.0.0.1',
        # retry_strategy: # disable?
      }
    end

    let(:client) { Client.new(client_options) }

<% all_operation_tests.each do |operation_tests| -%>
    describe '#<%= operation_tests.name %>' do
<% unless operation_tests.request_tests.empty? -%>
      describe 'requests' do
<% operation_tests.request_tests.each do |test| -%>
<% test.comments.each do |line| -%>
        # <%= line %>
<% end -%>
        it '<%= test.id %>' do
          resp = client.<%= operation_tests.name %>(<%= test.params %>)
          request = resp.context.request
          expect(request.http_method).to eq('<%= test.test_case['method'] %>')
          # expect(request.endpoint.path).to eq('<%= test.test_case['uri'] %>')
          # TODO: query and forbidden query parameters
<% test.test_case['headers']&.each do |k,v| -%>
          # expect(request.headers['<%= k %>']).to eq('<%= v %>')
<% end -%>
<% test.test_case['forbidHeaders']&.each do |k| -%>
          expect(request.headers.key?('<%= k %>')).to be(false)
<% end -%>
<% test.test_case['requireHeaders']&.each do |k| -%>
          expect(request.headers.key?('<%= k %>')).to be(true)
<% end -%>
<% if test.test_case['body'] -%>
          <%= test.body_expect %>
<% end -%>
        end
<% end -%>
      end
<% end -%>

<% unless operation_tests.response_tests.empty? -%>
      describe 'requests' do
      # TODO
      end
<% end -%>
    end
<% end -%>
  end
end
