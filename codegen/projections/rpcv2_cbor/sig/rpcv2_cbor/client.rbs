# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/smithy-lang/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

module Rpcv2Cbor
  class Client < Hearth::Client

    def self.plugins: () -> Hearth::PluginList[Config]

    def initialize: (?::Hash[::Symbol, untyped] options) -> void |
      (
        ?auth_resolver: Hearth::_AuthResolver[Auth::Params],
        ?auth_schemes: Array[Hearth::AuthSchemes::Base],
        ?disable_host_prefix: bool,
        ?endpoint: String,
        ?endpoint_resolver: Hearth::_EndpointResolver[Endpoint::Params],
        ?http_client: Hearth::HTTP::Client,
        ?interceptors: Hearth::InterceptorList[Config],
        ?logger: Logger,
        ?plugins: Hearth::PluginList[Config],
        ?retry_strategy: Hearth::_RetryStrategy,
        ?stub_responses: bool,
        ?stubs: Hearth::Stubs,
        ?telemetry_provider: Hearth::Telemetry::TelemetryProvider,
        ?validate_input: bool
      ) -> void

    attr_reader config: Config

    def empty_input_output: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EmptyInputOutputOutput] |
      (?Types::EmptyInputOutputInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EmptyInputOutputOutput]
    def float16: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::Float16Output] |
      (?Types::Float16Input params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::Float16Output]
    def fractional_seconds: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::FractionalSecondsOutput] |
      (?Types::FractionalSecondsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::FractionalSecondsOutput]
    def greeting_with_errors: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GreetingWithErrorsOutput] |
      (?Types::GreetingWithErrorsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GreetingWithErrorsOutput]
    def no_input_output: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::NoInputOutputOutput] |
      (?Types::NoInputOutputInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::NoInputOutputOutput]
    def operation_with_defaults: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::OperationWithDefaultsOutput] |
      (?Types::OperationWithDefaultsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::OperationWithDefaultsOutput] |
      (
        ?defaults: {
          default_string: ::String,
          default_boolean: bool,
          default_list: ::Array[::String],
          default_timestamp: ::Time,
          default_blob: ::String,
          default_byte: ::Integer,
          default_short: ::Integer,
          default_integer: ::Integer,
          default_long: ::Integer,
          default_float: ::Float,
          default_double: ::Float,
          default_map: ::Hash[::String, ::String],
          default_enum: ("FOO" | "BAR" | "BAZ"),
          default_int_enum: ::Integer,
          empty_string: ::String,
          false_boolean: bool,
          empty_blob: ::String,
          zero_byte: ::Integer,
          zero_short: ::Integer,
          zero_integer: ::Integer,
          zero_long: ::Integer,
          zero_float: ::Float,
          zero_double: ::Float
        },
        ?client_optional_defaults: {
          member: ::Integer
        },
        ?top_level_default: ::String,
        ?other_top_level_default: ::Integer
      ) -> Hearth::Output[Types::OperationWithDefaultsOutput]

    def optional_input_output: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::OptionalInputOutputOutput] |
      (?Types::OptionalInputOutputInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::OptionalInputOutputOutput] |
      (
        ?value: ::String
      ) -> Hearth::Output[Types::OptionalInputOutputOutput]

    def recursive_shapes: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RecursiveShapesOutput] |
      (?Types::RecursiveShapesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RecursiveShapesOutput] |
      (
        ?nested: {
          foo: ::String,
          nested: {
            bar: ::String,
            recursive_member: Types::RecursiveShapesInputOutputNested1
          }
        }
      ) -> Hearth::Output[Types::RecursiveShapesOutput]

    def rpc_v2_cbor_dense_maps: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RpcV2CborDenseMapsOutput] |
      (?Types::RpcV2CborDenseMapsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RpcV2CborDenseMapsOutput] |
      (
        ?dense_struct_map: ::Hash[::String, {
          hi: ::String
        }],
        ?dense_number_map: ::Hash[::String, ::Integer],
        ?dense_boolean_map: ::Hash[::String, bool],
        ?dense_string_map: ::Hash[::String, ::String],
        ?dense_set_map: ::Hash[::String, ::Array[::String]]
      ) -> Hearth::Output[Types::RpcV2CborDenseMapsOutput]

    def rpc_v2_cbor_lists: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RpcV2CborListsOutput] |
      (?Types::RpcV2CborListsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RpcV2CborListsOutput] |
      (
        ?string_list: ::Array[::String],
        ?string_set: ::Array[::String],
        ?integer_list: ::Array[::Integer],
        ?boolean_list: ::Array[bool],
        ?timestamp_list: ::Array[::Time],
        ?enum_list: ::Array[("Foo" | "Baz" | "Bar" | "1" | "0")],
        ?int_enum_list: ::Array[::Integer],
        ?nested_string_list: ::Array[::Array[::String]],
        ?structure_list: ::Array[{
          a: ::String,
          b: ::String
        }],
        ?blob_list: ::Array[::String]
      ) -> Hearth::Output[Types::RpcV2CborListsOutput]

    def rpc_v2_cbor_sparse_maps: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RpcV2CborSparseMapsOutput] |
      (?Types::RpcV2CborSparseMapsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RpcV2CborSparseMapsOutput] |
      (
        ?sparse_struct_map: ::Hash[::String, {
          hi: ::String
        }],
        ?sparse_number_map: ::Hash[::String, ::Integer],
        ?sparse_boolean_map: ::Hash[::String, bool],
        ?sparse_string_map: ::Hash[::String, ::String],
        ?sparse_set_map: ::Hash[::String, ::Array[::String]]
      ) -> Hearth::Output[Types::RpcV2CborSparseMapsOutput]

    def simple_scalar_properties: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SimpleScalarPropertiesOutput] |
      (?Types::SimpleScalarPropertiesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SimpleScalarPropertiesOutput] |
      (
        ?true_boolean_value: bool,
        ?false_boolean_value: bool,
        ?byte_value: ::Integer,
        ?double_value: ::Float,
        ?float_value: ::Float,
        ?integer_value: ::Integer,
        ?long_value: ::Integer,
        ?short_value: ::Integer,
        ?string_value: ::String,
        ?blob_value: ::String
      ) -> Hearth::Output[Types::SimpleScalarPropertiesOutput]

    def sparse_nulls_operation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SparseNullsOperationOutput] |
      (?Types::SparseNullsOperationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SparseNullsOperationOutput] |
      (
        ?sparse_string_list: ::Array[::String],
        ?sparse_string_map: ::Hash[::String, ::String]
      ) -> Hearth::Output[Types::SparseNullsOperationOutput]

  end
end
