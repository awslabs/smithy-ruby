# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/smithy-lang/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

module WhiteLabel
  class Client < Hearth::Client

    def self.plugins: () -> Hearth::PluginList[Config]

    def initialize: (?::Hash[::Symbol, untyped] options) -> void |
      (
        ?auth_resolver: Hearth::_AuthResolver[Auth::Params],
        ?auth_schemes: Array[Hearth::AuthSchemes::Base],
        ?disable_host_prefix: bool,
        ?disable_request_compression: bool,
        ?endpoint: String,
        ?endpoint_resolver: Hearth::_EndpointResolver[Endpoint::Params],
        ?http2_client: Hearth::HTTP2::Client,
        ?http_api_key_provider: Hearth::IdentityProvider,
        ?http_bearer_provider: Hearth::IdentityProvider,
        ?http_client: Hearth::HTTP::Client,
        ?http_custom_key_provider: Hearth::IdentityProvider,
        ?http_login_provider: Hearth::IdentityProvider,
        ?interceptors: Hearth::InterceptorList[Config],
        ?logger: Logger,
        ?plugins: Hearth::PluginList[Config],
        ?request_min_compression_size_bytes: Integer,
        ?retry_strategy: Hearth::_RetryStrategy,
        ?stage: String,
        ?stub_responses: bool,
        ?stubs: Hearth::Stubs,
        ?telemetry_provider: Hearth::Telemetry::TelemetryProviderBase,
        ?test_config: untyped,
        ?validate_input: bool
      ) -> void

    attr_reader config: Config

    def custom_auth: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CustomAuthOutput] |
      (?Types::CustomAuthInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CustomAuthOutput]
    def dataplane_endpoint: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DataplaneEndpointOutput] |
      (?Types::DataplaneEndpointInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DataplaneEndpointOutput]
    def defaults_test: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DefaultsTestOutput] |
      (?Types::DefaultsTestInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DefaultsTestOutput] |
      (
        ?defaults: {
          string: ::String,
          struct: {
            value: ::String
          },
          un_required_number: ::Integer,
          un_required_bool: bool,
          number: ::Integer,
          bool: bool,
          hello: ::String,
          simple_enum: ("YES" | "NO"),
          valued_enum: ("yes" | "no"),
          int_enum: ::Integer,
          null_document: Hearth::document,
          string_document: Hearth::document,
          boolean_document: Hearth::document,
          numbers_document: Hearth::document,
          list_document: Hearth::document,
          map_document: Hearth::document,
          list_of_strings: ::Array[::String],
          map_of_strings: ::Hash[::String, ::String],
          iso8601_timestamp: ::Time,
          epoch_timestamp: ::Time
        }
      ) -> Hearth::Output[Types::DefaultsTestOutput]

    def endpoint_operation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EndpointOperationOutput] |
      (?Types::EndpointOperationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EndpointOperationOutput]
    def endpoint_with_host_label_operation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EndpointWithHostLabelOperationOutput] |
      (?Types::EndpointWithHostLabelOperationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EndpointWithHostLabelOperationOutput] |
      (
        label_member: ::String
      ) -> Hearth::Output[Types::EndpointWithHostLabelOperationOutput]

    def http_api_key_auth: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpApiKeyAuthOutput] |
      (?Types::HttpApiKeyAuthInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpApiKeyAuthOutput]
    def http_basic_auth: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpBasicAuthOutput] |
      (?Types::HttpBasicAuthInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpBasicAuthOutput]
    def http_bearer_auth: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpBearerAuthOutput] |
      (?Types::HttpBearerAuthInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpBearerAuthOutput]
    def http_digest_auth: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpDigestAuthOutput] |
      (?Types::HttpDigestAuthInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpDigestAuthOutput]
    def kitchen_sink: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::KitchenSinkOutput] |
      (?Types::KitchenSinkInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::KitchenSinkOutput] |
      (
        ?string: ::String,
        ?simple_enum: ("YES" | "NO"),
        ?valued_enum: ("yes" | "no"),
        ?struct: {
          value: ::String
        },
        ?document: Hearth::document,
        ?list_of_strings: ::Array[::String],
        ?list_of_structs: ::Array[{
          value: ::String
        }],
        ?map_of_strings: ::Hash[::String, ::String],
        ?map_of_structs: ::Hash[::String, {
          value: ::String
        }],
        ?union: {
          String: ::String,
          Struct: {
            value: ::String
          }
        }
      ) -> Hearth::Output[Types::KitchenSinkOutput]

    def mixin_test: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::MixinTestOutput] |
      (?Types::MixinTestInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::MixinTestOutput] |
      (
        ?user_id: ::String
      ) -> Hearth::Output[Types::MixinTestOutput]

    def no_auth: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::NoAuthOutput] |
      (?Types::NoAuthInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::NoAuthOutput]
    def optional_auth: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::OptionalAuthOutput] |
      (?Types::OptionalAuthInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::OptionalAuthOutput]
    def ordered_auth: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::OrderedAuthOutput] |
      (?Types::OrderedAuthInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::OrderedAuthOutput]
    def paginators_test: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PaginatorsTestOperationOutput] |
      (?Types::PaginatorsTestOperationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PaginatorsTestOperationOutput] |
      (
        ?next_token: ::String
      ) -> Hearth::Output[Types::PaginatorsTestOperationOutput]

    def paginators_test_with_items: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PaginatorsTestWithItemsOutput] |
      (?Types::PaginatorsTestWithItemsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PaginatorsTestWithItemsOutput] |
      (
        ?next_token: ::String
      ) -> Hearth::Output[Types::PaginatorsTestWithItemsOutput]

    def relative_middleware: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RelativeMiddlewareOutput] |
      (?Types::RelativeMiddlewareInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RelativeMiddlewareOutput]
    def request_compression: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RequestCompressionOutput] |
      (?Types::RequestCompressionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RequestCompressionOutput] |
      (
        ?body: ::String
      ) -> Hearth::Output[Types::RequestCompressionOutput]

    def request_compression_streaming: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RequestCompressionStreamingOutput] |
      (?Types::RequestCompressionStreamingInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RequestCompressionStreamingOutput] |
      (
        body: (Hearth::_ReadableIO | Hearth::_WritableIO)
      ) -> Hearth::Output[Types::RequestCompressionStreamingOutput]

    def resource_endpoint: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResourceEndpointOutput] |
      (?Types::ResourceEndpointInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResourceEndpointOutput] |
      (
        resource_url: ::String
      ) -> Hearth::Output[Types::ResourceEndpointOutput]

    def streaming: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  ?{ (::String) -> Hearth::BlockIO } -> Hearth::Output[Types::StreamingOutput] |
      (?Types::StreamingInput params, ?::Hash[::Symbol, untyped] options)  ?{ (::String) -> Hearth::BlockIO } -> Hearth::Output[Types::StreamingOutput] |
      (
        stream: (Hearth::_ReadableIO | Hearth::_WritableIO)
      ) ?{ (::String) -> Hearth::BlockIO } -> Hearth::Output[Types::StreamingOutput]

    def streaming_with_length: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StreamingWithLengthOutput] |
      (?Types::StreamingWithLengthInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StreamingWithLengthOutput] |
      (
        stream: (Hearth::_ReadableIO | Hearth::_WritableIO)
      ) -> Hearth::Output[Types::StreamingWithLengthOutput]

    def telemetry_test: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TelemetryTestOutput] |
      (?Types::TelemetryTestInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TelemetryTestOutput] |
      (
        ?body: ::String
      ) -> Hearth::Output[Types::TelemetryTestOutput]

    def waiters_test: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::WaitersTestOutput] |
      (?Types::WaitersTestInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::WaitersTestOutput] |
      (
        ?status: ::String
      ) -> Hearth::Output[Types::WaitersTestOutput]

    def operation____paginators_test_with_bad_names: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::Struct____PaginatorsTestWithBadNamesOutput] |
      (?Types::Struct____PaginatorsTestWithBadNamesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::Struct____PaginatorsTestWithBadNamesOutput] |
      (
        ?member___next_token: ::String
      ) -> Hearth::Output[Types::Struct____PaginatorsTestWithBadNamesOutput]

    def start_event_stream: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options) -> EventStream::StartEventStreamOutput |
      (?::Hash[::Symbol, untyped] params, event_stream_handler: EventStream::StartEventStreamHandler) -> EventStream::StartEventStreamOutput |
      (?Types::StartEventStreamInput params, ?::Hash[::Symbol, untyped] options) -> EventStream::StartEventStreamOutput |
      (
        ?initial_structure: {
          message: ::String,
          nested: {
            values: ::Array[::String]
          }
        }
      ) -> EventStream::StartEventStreamOutput

  end
end
