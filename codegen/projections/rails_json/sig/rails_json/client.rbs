# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/smithy-lang/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

module RailsJson
  class Client < Hearth::Client

    def self.plugins: () -> Hearth::PluginList[Config]

    def initialize: (?::Hash[::Symbol, untyped] options) -> void |
      (
        ?auth_resolver: Hearth::_AuthResolver[Auth::Params],
        ?auth_schemes: Array[Hearth::AuthSchemes::Base],
        ?disable_host_prefix: bool,
        ?disable_request_compression: bool,
        ?endpoint: String,
        ?endpoint_resolver: Hearth::_EndpointResolver[Endpoint::Params],
        ?http_client: Hearth::HTTP::Client,
        ?interceptors: Hearth::InterceptorList,
        ?logger: Logger,
        ?plugins: Hearth::PluginList[Config],
        ?request_min_compression_size_bytes: Integer,
        ?retry_strategy: Hearth::_RetryStrategy,
        ?stub_responses: bool,
        ?stubs: Hearth::Stubs,
        ?validate_input: bool
      ) -> void

    attr_reader config: Config

    def all_query_string_types: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AllQueryStringTypesOutput] |
      (?Types::AllQueryStringTypesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AllQueryStringTypesOutput] |
      (
        ?query_string: ::String,
        ?query_string_list: ::Array[::String],
        ?query_string_set: ::Array[::String],
        ?query_byte: ::Integer,
        ?query_short: ::Integer,
        ?query_integer: ::Integer,
        ?query_integer_list: ::Array[::Integer],
        ?query_integer_set: ::Array[::Integer],
        ?query_long: ::Integer,
        ?query_float: ::Float,
        ?query_double: ::Float,
        ?query_double_list: ::Array[::Float],
        ?query_boolean: bool,
        ?query_boolean_list: ::Array[bool],
        ?query_timestamp: ::Time,
        ?query_timestamp_list: ::Array[::Time],
        ?query_enum: ("Foo" | "Baz" | "Bar" | "1" | "0"),
        ?query_enum_list: ::Array[("Foo" | "Baz" | "Bar" | "1" | "0")],
        ?query_integer_enum: ::Integer,
        ?query_integer_enum_list: ::Array[::Integer],
        ?query_params_map_of_string_list: ::Hash[::String, ::Array[::String]]
      ) -> Hearth::Output[Types::AllQueryStringTypesOutput]

    def constant_and_variable_query_string: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ConstantAndVariableQueryStringOutput] |
      (?Types::ConstantAndVariableQueryStringInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ConstantAndVariableQueryStringOutput] |
      (
        ?baz: ::String,
        ?maybe_set: ::String
      ) -> Hearth::Output[Types::ConstantAndVariableQueryStringOutput]

    def constant_query_string: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ConstantQueryStringOutput] |
      (?Types::ConstantQueryStringInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ConstantQueryStringOutput] |
      (
        hello: ::String
      ) -> Hearth::Output[Types::ConstantQueryStringOutput]

    def datetime_offsets: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DatetimeOffsetsOutput] |
      (?Types::DatetimeOffsetsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DatetimeOffsetsOutput]
    def document_type: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DocumentTypeOutput] |
      (?Types::DocumentTypeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DocumentTypeOutput] |
      (
        ?string_value: ::String,
        ?document_value: Hearth::document
      ) -> Hearth::Output[Types::DocumentTypeOutput]

    def document_type_as_map_value: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DocumentTypeAsMapValueOutput] |
      (?Types::DocumentTypeAsMapValueInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DocumentTypeAsMapValueOutput] |
      (
        ?doc_valued_map: ::Hash[::String, Hearth::document]
      ) -> Hearth::Output[Types::DocumentTypeAsMapValueOutput]

    def document_type_as_payload: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DocumentTypeAsPayloadOutput] |
      (?Types::DocumentTypeAsPayloadInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DocumentTypeAsPayloadOutput] |
      (
        ?document_value: Hearth::document
      ) -> Hearth::Output[Types::DocumentTypeAsPayloadOutput]

    def empty_input_and_empty_output: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EmptyInputAndEmptyOutputOutput] |
      (?Types::EmptyInputAndEmptyOutputInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EmptyInputAndEmptyOutputOutput]
    def endpoint_operation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EndpointOperationOutput] |
      (?Types::EndpointOperationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EndpointOperationOutput]
    def endpoint_with_host_label_operation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EndpointWithHostLabelOperationOutput] |
      (?Types::EndpointWithHostLabelOperationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EndpointWithHostLabelOperationOutput] |
      (
        label: ::String
      ) -> Hearth::Output[Types::EndpointWithHostLabelOperationOutput]

    def fractional_seconds: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::FractionalSecondsOutput] |
      (?Types::FractionalSecondsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::FractionalSecondsOutput]
    def greeting_with_errors: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GreetingWithErrorsOutput] |
      (?Types::GreetingWithErrorsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GreetingWithErrorsOutput]
    def host_with_path_operation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HostWithPathOperationOutput] |
      (?Types::HostWithPathOperationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HostWithPathOperationOutput]
    def http_checksum_required: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpChecksumRequiredOutput] |
      (?Types::HttpChecksumRequiredInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpChecksumRequiredOutput] |
      (
        ?foo: ::String
      ) -> Hearth::Output[Types::HttpChecksumRequiredOutput]

    def http_enum_payload: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpEnumPayloadOutput] |
      (?Types::HttpEnumPayloadInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpEnumPayloadOutput] |
      (
        ?payload: ("enumvalue")
      ) -> Hearth::Output[Types::HttpEnumPayloadOutput]

    def http_payload_traits: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpPayloadTraitsOutput] |
      (?Types::HttpPayloadTraitsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpPayloadTraitsOutput] |
      (
        ?foo: ::String,
        ?blob: ::String
      ) -> Hearth::Output[Types::HttpPayloadTraitsOutput]

    def http_payload_traits_with_media_type: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpPayloadTraitsWithMediaTypeOutput] |
      (?Types::HttpPayloadTraitsWithMediaTypeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpPayloadTraitsWithMediaTypeOutput] |
      (
        ?foo: ::String,
        ?blob: ::String
      ) -> Hearth::Output[Types::HttpPayloadTraitsWithMediaTypeOutput]

    def http_payload_with_structure: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpPayloadWithStructureOutput] |
      (?Types::HttpPayloadWithStructureInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpPayloadWithStructureOutput] |
      (
        ?nested: {
          greeting: ::String,
          name: ::String
        }
      ) -> Hearth::Output[Types::HttpPayloadWithStructureOutput]

    def http_payload_with_union: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpPayloadWithUnionOutput] |
      (?Types::HttpPayloadWithUnionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpPayloadWithUnionOutput] |
      (
        ?nested: {
          Greeting: ::String
        }
      ) -> Hearth::Output[Types::HttpPayloadWithUnionOutput]

    def http_prefix_headers: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpPrefixHeadersOutput] |
      (?Types::HttpPrefixHeadersInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpPrefixHeadersOutput] |
      (
        ?foo: ::String,
        ?foo_map: ::Hash[::String, ::String]
      ) -> Hearth::Output[Types::HttpPrefixHeadersOutput]

    def http_prefix_headers_in_response: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpPrefixHeadersInResponseOutput] |
      (?Types::HttpPrefixHeadersInResponseInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpPrefixHeadersInResponseOutput]
    def http_request_with_float_labels: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpRequestWithFloatLabelsOutput] |
      (?Types::HttpRequestWithFloatLabelsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpRequestWithFloatLabelsOutput] |
      (
        float: ::Float,
        double: ::Float
      ) -> Hearth::Output[Types::HttpRequestWithFloatLabelsOutput]

    def http_request_with_greedy_label_in_path: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpRequestWithGreedyLabelInPathOutput] |
      (?Types::HttpRequestWithGreedyLabelInPathInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpRequestWithGreedyLabelInPathOutput] |
      (
        foo: ::String,
        baz: ::String
      ) -> Hearth::Output[Types::HttpRequestWithGreedyLabelInPathOutput]

    def http_request_with_labels: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpRequestWithLabelsOutput] |
      (?Types::HttpRequestWithLabelsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpRequestWithLabelsOutput] |
      (
        string: ::String,
        short: ::Integer,
        integer: ::Integer,
        long: ::Integer,
        float: ::Float,
        double: ::Float,
        boolean: bool,
        timestamp: ::Time
      ) -> Hearth::Output[Types::HttpRequestWithLabelsOutput]

    def http_request_with_labels_and_timestamp_format: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpRequestWithLabelsAndTimestampFormatOutput] |
      (?Types::HttpRequestWithLabelsAndTimestampFormatInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpRequestWithLabelsAndTimestampFormatOutput] |
      (
        member_epoch_seconds: ::Time,
        member_http_date: ::Time,
        member_date_time: ::Time,
        default_format: ::Time,
        target_epoch_seconds: ::Time,
        target_http_date: ::Time,
        target_date_time: ::Time
      ) -> Hearth::Output[Types::HttpRequestWithLabelsAndTimestampFormatOutput]

    def http_request_with_regex_literal: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpRequestWithRegexLiteralOutput] |
      (?Types::HttpRequestWithRegexLiteralInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpRequestWithRegexLiteralOutput] |
      (
        str: ::String
      ) -> Hearth::Output[Types::HttpRequestWithRegexLiteralOutput]

    def http_response_code: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpResponseCodeOutput] |
      (?Types::HttpResponseCodeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpResponseCodeOutput]
    def http_string_payload: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpStringPayloadOutput] |
      (?Types::HttpStringPayloadInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::HttpStringPayloadOutput] |
      (
        ?payload: ::String
      ) -> Hearth::Output[Types::HttpStringPayloadOutput]

    def ignore_query_params_in_response: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::IgnoreQueryParamsInResponseOutput] |
      (?Types::IgnoreQueryParamsInResponseInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::IgnoreQueryParamsInResponseOutput]
    def input_and_output_with_headers: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::InputAndOutputWithHeadersOutput] |
      (?Types::InputAndOutputWithHeadersInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::InputAndOutputWithHeadersOutput] |
      (
        ?header_string: ::String,
        ?header_byte: ::Integer,
        ?header_short: ::Integer,
        ?header_integer: ::Integer,
        ?header_long: ::Integer,
        ?header_float: ::Float,
        ?header_double: ::Float,
        ?header_true_bool: bool,
        ?header_false_bool: bool,
        ?header_string_list: ::Array[::String],
        ?header_string_set: ::Array[::String],
        ?header_integer_list: ::Array[::Integer],
        ?header_boolean_list: ::Array[bool],
        ?header_timestamp_list: ::Array[::Time],
        ?header_enum: ("Foo" | "Baz" | "Bar" | "1" | "0"),
        ?header_enum_list: ::Array[("Foo" | "Baz" | "Bar" | "1" | "0")],
        ?header_integer_enum: ::Integer,
        ?header_integer_enum_list: ::Array[::Integer]
      ) -> Hearth::Output[Types::InputAndOutputWithHeadersOutput]

    def json_blobs: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::JsonBlobsOutput] |
      (?Types::JsonBlobsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::JsonBlobsOutput] |
      (
        ?data: ::String
      ) -> Hearth::Output[Types::JsonBlobsOutput]

    def json_enums: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::JsonEnumsOutput] |
      (?Types::JsonEnumsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::JsonEnumsOutput] |
      (
        ?foo_enum1: ("Foo" | "Baz" | "Bar" | "1" | "0"),
        ?foo_enum2: ("Foo" | "Baz" | "Bar" | "1" | "0"),
        ?foo_enum3: ("Foo" | "Baz" | "Bar" | "1" | "0"),
        ?foo_enum_list: ::Array[("Foo" | "Baz" | "Bar" | "1" | "0")],
        ?foo_enum_set: ::Array[("Foo" | "Baz" | "Bar" | "1" | "0")],
        ?foo_enum_map: ::Hash[::String, ("Foo" | "Baz" | "Bar" | "1" | "0")]
      ) -> Hearth::Output[Types::JsonEnumsOutput]

    def json_int_enums: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::JsonIntEnumsOutput] |
      (?Types::JsonIntEnumsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::JsonIntEnumsOutput] |
      (
        ?integer_enum1: ::Integer,
        ?integer_enum2: ::Integer,
        ?integer_enum3: ::Integer,
        ?integer_enum_list: ::Array[::Integer],
        ?integer_enum_set: ::Array[::Integer],
        ?integer_enum_map: ::Hash[::String, ::Integer]
      ) -> Hearth::Output[Types::JsonIntEnumsOutput]

    def json_lists: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::JsonListsOutput] |
      (?Types::JsonListsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::JsonListsOutput] |
      (
        ?string_list: ::Array[::String],
        ?string_set: ::Array[::String],
        ?integer_list: ::Array[::Integer],
        ?boolean_list: ::Array[bool],
        ?timestamp_list: ::Array[::Time],
        ?enum_list: ::Array[("Foo" | "Baz" | "Bar" | "1" | "0")],
        ?int_enum_list: ::Array[::Integer],
        ?nested_string_list: ::Array[::Array[::String]],
        ?structure_list: ::Array[{
          a: ::String,
          b: ::String
        }]
      ) -> Hearth::Output[Types::JsonListsOutput]

    def json_maps: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::JsonMapsOutput] |
      (?Types::JsonMapsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::JsonMapsOutput] |
      (
        ?dense_struct_map: ::Hash[::String, {
          hi: ::String
        }],
        ?dense_number_map: ::Hash[::String, ::Integer],
        ?dense_boolean_map: ::Hash[::String, bool],
        ?dense_string_map: ::Hash[::String, ::String],
        ?dense_set_map: ::Hash[::String, ::Array[::String]]
      ) -> Hearth::Output[Types::JsonMapsOutput]

    def json_timestamps: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::JsonTimestampsOutput] |
      (?Types::JsonTimestampsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::JsonTimestampsOutput] |
      (
        ?normal: ::Time,
        ?date_time: ::Time,
        ?date_time_on_target: ::Time,
        ?epoch_seconds: ::Time,
        ?epoch_seconds_on_target: ::Time,
        ?http_date: ::Time,
        ?http_date_on_target: ::Time
      ) -> Hearth::Output[Types::JsonTimestampsOutput]

    def json_unions: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::JsonUnionsOutput] |
      (?Types::JsonUnionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::JsonUnionsOutput] |
      (
        ?contents: {
          StringValue: ::String,
          BooleanValue: bool,
          NumberValue: ::Integer,
          BlobValue: ::String,
          TimestampValue: ::Time,
          EnumValue: ("Foo" | "Baz" | "Bar" | "1" | "0"),
          ListValue: ::Array[::String],
          MapValue: ::Hash[::String, ::String],
          StructureValue: {
            hi: ::String
          },
          RenamedStructureValue: {
            salutation: ::String
          }
        }
      ) -> Hearth::Output[Types::JsonUnionsOutput]

    def media_type_header: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::MediaTypeHeaderOutput] |
      (?Types::MediaTypeHeaderInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::MediaTypeHeaderOutput] |
      (
        ?json: ::String
      ) -> Hearth::Output[Types::MediaTypeHeaderOutput]

    def no_input_and_no_output: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::NoInputAndNoOutputOutput] |
      (?Types::NoInputAndNoOutputInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::NoInputAndNoOutputOutput]
    def no_input_and_output: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::NoInputAndOutputOutput] |
      (?Types::NoInputAndOutputInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::NoInputAndOutputOutput]
    def null_and_empty_headers_client: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::NullAndEmptyHeadersClientOutput] |
      (?Types::NullAndEmptyHeadersClientInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::NullAndEmptyHeadersClientOutput] |
      (
        ?a: ::String,
        ?b: ::String,
        ?c: ::Array[::String]
      ) -> Hearth::Output[Types::NullAndEmptyHeadersClientOutput]

    def null_and_empty_headers_server: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::NullAndEmptyHeadersServerOutput] |
      (?Types::NullAndEmptyHeadersServerInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::NullAndEmptyHeadersServerOutput] |
      (
        ?a: ::String,
        ?b: ::String,
        ?c: ::Array[::String]
      ) -> Hearth::Output[Types::NullAndEmptyHeadersServerOutput]

    def omits_null_serializes_empty_string: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::OmitsNullSerializesEmptyStringOutput] |
      (?Types::OmitsNullSerializesEmptyStringInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::OmitsNullSerializesEmptyStringOutput] |
      (
        ?null_value: ::String,
        ?empty_string: ::String
      ) -> Hearth::Output[Types::OmitsNullSerializesEmptyStringOutput]

    def omits_serializing_empty_lists: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::OmitsSerializingEmptyListsOutput] |
      (?Types::OmitsSerializingEmptyListsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::OmitsSerializingEmptyListsOutput] |
      (
        ?query_string_list: ::Array[::String],
        ?query_integer_list: ::Array[::Integer],
        ?query_double_list: ::Array[::Float],
        ?query_boolean_list: ::Array[bool],
        ?query_timestamp_list: ::Array[::Time],
        ?query_enum_list: ::Array[("Foo" | "Baz" | "Bar" | "1" | "0")],
        ?query_integer_enum_list: ::Array[::Integer]
      ) -> Hearth::Output[Types::OmitsSerializingEmptyListsOutput]

    def operation_with_defaults: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::OperationWithDefaultsOutput] |
      (?Types::OperationWithDefaultsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::OperationWithDefaultsOutput] |
      (
        ?defaults: {
          default_string: ::String,
          default_boolean: bool,
          default_list: ::Array[::String],
          default_document_map: Hearth::document,
          default_document_string: Hearth::document,
          default_document_boolean: Hearth::document,
          default_document_list: Hearth::document,
          default_null_document: Hearth::document,
          default_timestamp: ::Time,
          default_blob: ::String,
          default_byte: ::Integer,
          default_short: ::Integer,
          default_integer: ::Integer,
          default_long: ::Integer,
          default_float: ::Float,
          default_double: ::Float,
          default_map: ::Hash[::String, ::String],
          default_enum: ("FOO" | "BAR" | "BAZ"),
          default_int_enum: ::Integer,
          empty_string: ::String,
          false_boolean: bool,
          empty_blob: ::String,
          zero_byte: ::Integer,
          zero_short: ::Integer,
          zero_integer: ::Integer,
          zero_long: ::Integer,
          zero_float: ::Float,
          zero_double: ::Float
        },
        ?client_optional_defaults: {
          member: ::Integer
        },
        ?top_level_default: ::String,
        ?other_top_level_default: ::Integer
      ) -> Hearth::Output[Types::OperationWithDefaultsOutput]

    def post_player_action: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PostPlayerActionOutput] |
      (?Types::PostPlayerActionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PostPlayerActionOutput] |
      (
        ?action: {
          Quit: {

          }
        }
      ) -> Hearth::Output[Types::PostPlayerActionOutput]

    def post_union_with_json_name: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PostUnionWithJsonNameOutput] |
      (?Types::PostUnionWithJsonNameInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PostUnionWithJsonNameOutput] |
      (
        ?value: {
          Foo: ::String,
          Bar: ::String,
          Baz: ::String
        }
      ) -> Hearth::Output[Types::PostUnionWithJsonNameOutput]

    def put_with_content_encoding: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutWithContentEncodingOutput] |
      (?Types::PutWithContentEncodingInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutWithContentEncodingOutput] |
      (
        ?encoding: ::String,
        ?data: ::String
      ) -> Hearth::Output[Types::PutWithContentEncodingOutput]

    def query_idempotency_token_auto_fill: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::QueryIdempotencyTokenAutoFillOutput] |
      (?Types::QueryIdempotencyTokenAutoFillInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::QueryIdempotencyTokenAutoFillOutput] |
      (
        ?token: ::String
      ) -> Hearth::Output[Types::QueryIdempotencyTokenAutoFillOutput]

    def query_params_as_string_list_map: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::QueryParamsAsStringListMapOutput] |
      (?Types::QueryParamsAsStringListMapInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::QueryParamsAsStringListMapOutput] |
      (
        ?qux: ::String,
        ?foo: ::Hash[::String, ::Array[::String]]
      ) -> Hearth::Output[Types::QueryParamsAsStringListMapOutput]

    def query_precedence: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::QueryPrecedenceOutput] |
      (?Types::QueryPrecedenceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::QueryPrecedenceOutput] |
      (
        ?foo: ::String,
        ?baz: ::Hash[::String, ::String]
      ) -> Hearth::Output[Types::QueryPrecedenceOutput]

    def recursive_shapes: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RecursiveShapesOutput] |
      (?Types::RecursiveShapesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RecursiveShapesOutput] |
      (
        ?nested: {
          foo: ::String,
          nested: {
            bar: ::String,
            recursive_member: Types::RecursiveShapesInputOutputNested1
          }
        }
      ) -> Hearth::Output[Types::RecursiveShapesOutput]

    def simple_scalar_properties: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SimpleScalarPropertiesOutput] |
      (?Types::SimpleScalarPropertiesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SimpleScalarPropertiesOutput] |
      (
        ?foo: ::String,
        ?string_value: ::String,
        ?true_boolean_value: bool,
        ?false_boolean_value: bool,
        ?byte_value: ::Integer,
        ?short_value: ::Integer,
        ?integer_value: ::Integer,
        ?long_value: ::Integer,
        ?float_value: ::Float,
        ?double_value: ::Float
      ) -> Hearth::Output[Types::SimpleScalarPropertiesOutput]

    def sparse_json_lists: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SparseJsonListsOutput] |
      (?Types::SparseJsonListsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SparseJsonListsOutput] |
      (
        ?sparse_string_list: ::Array[::String]
      ) -> Hearth::Output[Types::SparseJsonListsOutput]

    def sparse_json_maps: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SparseJsonMapsOutput] |
      (?Types::SparseJsonMapsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SparseJsonMapsOutput] |
      (
        ?sparse_struct_map: ::Hash[::String, {
          hi: ::String
        }],
        ?sparse_number_map: ::Hash[::String, ::Integer],
        ?sparse_boolean_map: ::Hash[::String, bool],
        ?sparse_string_map: ::Hash[::String, ::String],
        ?sparse_set_map: ::Hash[::String, ::Array[::String]]
      ) -> Hearth::Output[Types::SparseJsonMapsOutput]

    def streaming_traits: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  ?{ (::String) -> Hearth::BlockIO } -> Hearth::Output[Types::StreamingTraitsOutput] |
      (?Types::StreamingTraitsInput params, ?::Hash[::Symbol, untyped] options)  ?{ (::String) -> Hearth::BlockIO } -> Hearth::Output[Types::StreamingTraitsOutput] |
      (
        ?foo: ::String,
        ?blob: ::String
      ) ?{ (::String) -> Hearth::BlockIO } -> Hearth::Output[Types::StreamingTraitsOutput]

    def streaming_traits_require_length: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StreamingTraitsRequireLengthOutput] |
      (?Types::StreamingTraitsRequireLengthInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StreamingTraitsRequireLengthOutput] |
      (
        ?foo: ::String,
        ?blob: ::String
      ) -> Hearth::Output[Types::StreamingTraitsRequireLengthOutput]

    def streaming_traits_with_media_type: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  ?{ (::String) -> Hearth::BlockIO } -> Hearth::Output[Types::StreamingTraitsWithMediaTypeOutput] |
      (?Types::StreamingTraitsWithMediaTypeInput params, ?::Hash[::Symbol, untyped] options)  ?{ (::String) -> Hearth::BlockIO } -> Hearth::Output[Types::StreamingTraitsWithMediaTypeOutput] |
      (
        ?foo: ::String,
        ?blob: ::String
      ) ?{ (::String) -> Hearth::BlockIO } -> Hearth::Output[Types::StreamingTraitsWithMediaTypeOutput]

    def test_body_structure: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TestBodyStructureOutput] |
      (?Types::TestBodyStructureInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TestBodyStructureOutput] |
      (
        ?test_id: ::String,
        ?test_config: {
          timeout: ::Integer
        }
      ) -> Hearth::Output[Types::TestBodyStructureOutput]

    def test_no_payload: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TestNoPayloadOutput] |
      (?Types::TestNoPayloadInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TestNoPayloadOutput] |
      (
        ?test_id: ::String
      ) -> Hearth::Output[Types::TestNoPayloadOutput]

    def test_payload_blob: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TestPayloadBlobOutput] |
      (?Types::TestPayloadBlobInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TestPayloadBlobOutput] |
      (
        ?content_type: ::String,
        ?data: ::String
      ) -> Hearth::Output[Types::TestPayloadBlobOutput]

    def test_payload_structure: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TestPayloadStructureOutput] |
      (?Types::TestPayloadStructureInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TestPayloadStructureOutput] |
      (
        ?test_id: ::String,
        ?payload_config: {
          data: ::Integer
        }
      ) -> Hearth::Output[Types::TestPayloadStructureOutput]

    def timestamp_format_headers: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TimestampFormatHeadersOutput] |
      (?Types::TimestampFormatHeadersInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TimestampFormatHeadersOutput] |
      (
        ?member_epoch_seconds: ::Time,
        ?member_http_date: ::Time,
        ?member_date_time: ::Time,
        ?default_format: ::Time,
        ?target_epoch_seconds: ::Time,
        ?target_http_date: ::Time,
        ?target_date_time: ::Time
      ) -> Hearth::Output[Types::TimestampFormatHeadersOutput]

    def unit_input_and_output: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UnitInputAndOutputOutput] |
      (?Types::UnitInputAndOutputInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UnitInputAndOutputOutput]
  end
end
